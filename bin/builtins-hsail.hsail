// MIT License

// Copyright Â© 2016 Advanced Micro Devices, Inc.

// Permission is hereby granted, free of charge, to any person obtaining a copy of
// this software and associated documentation files (the "Software"), to deal in
// the Software
// without restriction, including without limitation the rights to use, copy,
// modify, merge, publish, distribute, sublicense, and/or sell copies of the
// Software, and to permit
// persons to whom the Software is furnished to do so, subject to the following
// conditions:

// The above copyright notice and this permission notice shall be included in all
// copies or substantial portions of the Software.

// THE SOFTWARE IS PROVIDED "AS IS", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR
// IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY,
// FITNESS FOR A PARTICULAR
// PURPOSE AND NONINFRINGEMENT. IN NO EVENT SHALL THE AUTHORS OR COPYRIGHT HOLDERS
// BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER LIABILITY, WHETHER IN AN ACTION OF
// CONTRACT, TORT OR
// OTHERWISE, ARISING FROM, OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE
// OR OTHER DEALINGS IN THE SOFTWARE.
// 

prog function &hsa_queue_load_write_index_relaxed(arg_u64 %ret)(arg_u64 %arg_p0)
{
    @hsa_queue_load_write_index_relaxed_entry:
    ld_arg_align(8)_u64	$d0, [%arg_p0];                     // d0 has the queue address
    ldqueuewriteindex_global_rlx_u64 $d1, [$d0];            // load write index of queue d0 to d1
    st_arg_u64 $d1, [%ret];                                 // return write index
    ret;
};

prog function &hsa_queue_add_write_index_relaxed(arg_u64 %ret)(arg_u64 %arg_p0, arg_u64 %arg_p1)
{
    @hsa_queue_add_write_index_relaxed_entry:
    ld_arg_align(8)_u64	$d0, [%arg_p0];                     // d0 has the queue address
    ld_arg_align(8)_u64	$d1, [%arg_p1];                     // d1 has the queue address
    addqueuewriteindex_global_rlx_u64 $d2, [$d0], $d1;      // add write index of queue d0 by d1
    st_arg_u64 $d2, [%ret];                                 // return write index
    ret;
};

prog function &hsa_queue_store_write_index_relaxed()(
	arg_u64 %arg_p0,
	arg_u64 %arg_p1)
{
   @hsa_queue_store_write_index_relaxed_entry:
   ld_arg_align(8)_u64	$d0, [%arg_p0];                     // d0 has the queue address
   ld_arg_align(8)_u64	$d1, [%arg_p1];                     // d2 has write index 
   stqueuewriteindex_global_rlx_u64 [$d0],  $d1;            // store write index d1 to queue d0
   ret;
};

prog function &hsa_signal_store_release()(
	arg_u64 %arg_p0,
	arg_u64 %arg_p1)
{
   @hsa_signal_store_release_entry:
   ld_arg_align(8)_u64	$d0, [%arg_p0];                     // d0 has signal handle 
   ld_arg_align(8)_u64	$d1, [%arg_p1];                     // d2 has value 
   signalnoret_st_screl_b64_sig64 $d0, $d1;                   // store value d1 to signal handle d0
   ret;
};

prog function &hsa_signal_store_relaxed()(
	arg_u64 %arg_p0,
	arg_u64 %arg_p1)
{
   @hsa_signal_store_relaxed_entry:
   ld_arg_align(8)_u64	$d0, [%arg_p0];                     // d0 has signal handle 
   ld_arg_align(8)_u64	$d1, [%arg_p1];                     // d2 has value 
   signalnoret_st_rlx_b64_sig64 $d0, $d1;                   // store value d1 to signal handle d0
   ret;
};

prog function &hsa_signal_add_relaxed()(
	arg_u64 %arg_p0,
	arg_u64 %arg_p1)
{
   @hsa_signal_store_add_relaxed_entry:
   ld_arg_align(8)_u64	$d0, [%arg_p0];                     // d0 has signal handle 
   ld_arg_align(8)_u64	$d1, [%arg_p1];                     // d2 has value 
   signalnoret_add_rlx_u64_sig64 $d0, $d1;                  // add value d1 to signal handle d0
   ret;
};

prog function &hsa_signal_add_release()(
	arg_u64 %arg_p0,
	arg_u64 %arg_p1)
{
   @hsa_signal_store_add_release_entry:
   ld_arg_align(8)_u64	$d0, [%arg_p0];                     // d0 has signal handle 
   ld_arg_align(8)_u64	$d1, [%arg_p1];                     // d2 has value 
   signalnoret_add_screl_u64_sig64 $d0, $d1;                  // add value d1 to signal handle d0
   ret;
};



prog function &hsa_signal_load_relaxed(arg_u64 %ret)(arg_u64 %arg_p0)
{
   @hsa_signal_load_relaxed_entry:
   ld_arg_align(8)_u64	$d0, [%arg_p0];                     // d0 has signal handle 
   signal_ld_rlx_b64_sig64 $d1, $d0;                        // load value d1 from signal handle d0
   st_arg_u64 $d1, [%ret];
   ret;
};

prog function &hsa_signal_wait_relaxed(arg_u64 %ret)(
	arg_u64 %arg_p0,
	arg_u32 %arg_p1,
	arg_u64 %arg_p2,
	arg_u64 %arg_p3,
    arg_u32 %arg_p4){
    @hsa_signal_wait_relaxed_entry:
    ld_arg_align(8)_u64	$d0, [%arg_p0];                     // d0 has signal handle 
    ld_arg_align(8)_u64	$d1, [%arg_p2];                     // d2 has value 
    signal_wait_eq_rlx_s64_sig64 $d2, $d0, $d1;
    st_arg_u64 $d2, [%ret];
};

prog function &get_atmi_context(arg_u64 %ret)()
{
    @get_atmi_context_entry:
    ld_global_align(8)_const_width(all)_u64 $d0, [&ATMI_CONTEXT];
    st_arg_u64 $d0, [%ret];
    ret;
};

//System-wide Atomic Ops (32-bit)

prog function &hsa_atomic_load_system(arg_u32 %ret)(arg_u64 %arg_p0)
{
    @hsa_atomic_load_system_entry:
    ld_arg_align(8)_u64	$d0, [%arg_p0];                      
	atomic_ld_global_rlx_system_b32	$s1, [$d0];
    st_arg_u32 $s1, [%ret];
    ret;
};

prog function &hsa_atomic_and_system(arg_u32 %ret)(arg_u64 %arg_p0, arg_u32 %arg_p1)
{
    @hsa_atomic_and_system_entry:
    ld_arg_align(8)_u64	$d0, [%arg_p0];                      
    ld_arg_align(8)_s32	$s0, [%arg_p1];                       
	atomic_and_global_rlx_system_b32	$s1, [$d0], $s0;
    st_arg_u32 $s1, [%ret];
    ret;
};

prog function &hsa_atomic_or_system(arg_u32 %ret)(arg_u64 %arg_p0, arg_u32 %arg_p1)
{
    @hsa_atomic_or_system_entry:
    ld_arg_align(8)_u64	$d0, [%arg_p0];                      
    ld_arg_align(8)_s32	$s0, [%arg_p1];                       
	atomic_or_global_rlx_system_b32	$s1, [$d0], $s0;
    st_arg_u32 $s1, [%ret];
    ret;
};

prog function &hsa_atomic_xor_system(arg_u32 %ret)(arg_u64 %arg_p0, arg_u32 %arg_p1)
{
    @hsa_atomic_xor_system_entry:
    ld_arg_align(8)_u64	$d0, [%arg_p0];                      
    ld_arg_align(8)_s32	$s0, [%arg_p1];                       
	atomic_xor_global_rlx_system_b32	$s1, [$d0], $s0;
    st_arg_u32 $s1, [%ret];
    ret;
};

prog function &hsa_atomic_xchg_system(arg_u32 %ret)(arg_u64 %arg_p0, arg_u32 %arg_p1)
{
    @hsa_atomic_xchg_system_entry:
    ld_arg_align(8)_u64	$d0, [%arg_p0];                      
    ld_arg_align(8)_s32	$s0, [%arg_p1];                       
	atomic_exch_global_rlx_system_b32	$s1, [$d0], $s0;
    st_arg_u32 $s1, [%ret];
    ret;
};

prog function &hsa_atomic_add_system(arg_u32 %ret)(arg_u64 %arg_p0, arg_u32 %arg_p1)
{
    @hsa_atomic_add_system_entry:
    ld_arg_align(8)_u64	$d0, [%arg_p0];                     // d0 has signal handle 
    ld_arg_align(8)_s32	$s0, [%arg_p1];                     // d2 has value 
	atomic_add_global_rlx_system_s32	$s1, [$d0], $s0;
    st_arg_u32 $s1, [%ret];
    ret;
};

prog function &hsa_atomic_sub_system(arg_u32 %ret)(arg_u64 %arg_p0, arg_u32 %arg_p1)
{
    @hsa_atomic_sub_system_entry:
    ld_arg_align(8)_u64	$d0, [%arg_p0];                      
    ld_arg_align(8)_s32	$s0, [%arg_p1];                       
	atomic_sub_global_rlx_system_s32	$s1, [$d0], $s0;
    st_arg_u32 $s1, [%ret];
    ret;
};

prog function &hsa_atomic_max_system(arg_u32 %ret)(arg_u64 %arg_p0, arg_u32 %arg_p1)
{
    @hsa_atomic_max_system_entry:
    ld_arg_align(8)_u64	$d0, [%arg_p0];                      
    ld_arg_align(8)_s32	$s0, [%arg_p1];                       
	atomic_max_global_rlx_system_s32	$s1, [$d0], $s0;
    st_arg_u32 $s1, [%ret];
    ret;
};


prog function &hsa_atomic_min_system(arg_u32 %ret)(arg_u64 %arg_p0, arg_u32 %arg_p1)
{
    @hsa_atomic_min_system_entry:
    ld_arg_align(8)_u64	$d0, [%arg_p0];                      
    ld_arg_align(8)_s32	$s0, [%arg_p1];                       
	atomic_min_global_rlx_system_s32	$s1, [$d0], $s0;
    st_arg_u32 $s1, [%ret];
    ret;
};

prog function &hsa_atomic_cas_system(arg_u32 %ret)(arg_u64 %arg_p0, arg_u32 %arg_p1, arg_u32 %arg_p2)
{
    @hsa_atomic_cas_system_entry:
    ld_arg_align(8)_u64	$d0, [%arg_p0];                      
    ld_arg_align(8)_s32	$s0, [%arg_p1];                       
    ld_arg_align(8)_s32	$s1, [%arg_p2];                       
	atomic_cas_global_rlx_system_b32	$s2, [$d0], $s0, $s1;
    st_arg_u32 $s2, [%ret];
    ret;
};


//System-wide Atomic Ops (64-bit)

prog function &hsa_atomic_load_system_long(arg_u64 %ret)(arg_u64 %arg_p0)
{
    @hsa_atomic_load_system_entry:
    ld_arg_align(8)_u64	$d0, [%arg_p0];                      
	atomic_ld_global_rlx_system_b64	$d2, [$d0];
    st_arg_u64 $d2, [%ret];
    ret;
};

prog function &hsa_atomic_and_system_long(arg_u64 %ret)(arg_u64 %arg_p0, arg_u64 %arg_p1)
{
    @hsa_atomic_and_system_entry:
    ld_arg_align(8)_u64	$d0, [%arg_p0];                      
    ld_arg_align(8)_s64	$d1, [%arg_p1];                       
	atomic_and_global_rlx_system_b64	$d2, [$d0], $d1;
    st_arg_u64 $d2, [%ret];
    ret;
};

prog function &hsa_atomic_or_system_long(arg_u64 %ret)(arg_u64 %arg_p0, arg_u64 %arg_p1)
{
    @hsa_atomic_or_system_entry:
    ld_arg_align(8)_u64	$d0, [%arg_p0];                      
    ld_arg_align(8)_s64	$d1, [%arg_p1];                       
	atomic_or_global_rlx_system_b64	$d2, [$d0], $d1;
    st_arg_u64 $d2, [%ret];
    ret;
};

prog function &hsa_atomic_xor_system_long(arg_u64 %ret)(arg_u64 %arg_p0, arg_u64 %arg_p1)
{
    @hsa_atomic_xor_system_entry:
    ld_arg_align(8)_u64	$d0, [%arg_p0];                      
    ld_arg_align(8)_s64	$d1, [%arg_p1];                       
	atomic_xor_global_rlx_system_b64	$d2, [$d0], $d1;
    st_arg_u64 $d2, [%ret];
    ret;
};

prog function &hsa_atomic_xchg_system_long(arg_u64 %ret)(arg_u64 %arg_p0, arg_u64 %arg_p1)
{
    @hsa_atomic_xchg_system_entry:
    ld_arg_align(8)_u64	$d0, [%arg_p0];                      
    ld_arg_align(8)_s64	$d1, [%arg_p1];                       
	atomic_exch_global_rlx_system_b64	$d2, [$d0], $d1;
    st_arg_u64 $d2, [%ret];
    ret;
};

prog function &hsa_atomic_add_system_long(arg_u64 %ret)(arg_u64 %arg_p0, arg_u64 %arg_p1)
{
    @hsa_atomic_add_system_entry:
    ld_arg_align(8)_u64	$d0, [%arg_p0];                     // d0 has signal handle 
    ld_arg_align(8)_s64	$d1, [%arg_p1];                     // d2 has value 
	atomic_add_global_rlx_system_s64	$d2, [$d0], $d1;
    st_arg_u64 $d2, [%ret];
    ret;
};

prog function &hsa_atomic_sub_system_long(arg_u64 %ret)(arg_u64 %arg_p0, arg_u64 %arg_p1)
{
    @hsa_atomic_sub_system_entry:
    ld_arg_align(8)_u64	$d0, [%arg_p0];                      
    ld_arg_align(8)_s64	$d1, [%arg_p1];                       
	atomic_sub_global_rlx_system_s64	$d2, [$d0], $d1;
    st_arg_u64 $d2, [%ret];
    ret;
};

prog function &hsa_atomic_max_system_long(arg_u64 %ret)(arg_u64 %arg_p0, arg_u64 %arg_p1)
{
    @hsa_atomic_max_system_entry:
    ld_arg_align(8)_u64	$d0, [%arg_p0];                      
    ld_arg_align(8)_s64	$d1, [%arg_p1];                       
	atomic_max_global_rlx_system_s64	$d2, [$d0], $d1;
    st_arg_u64 $d2, [%ret];
    ret;
};


prog function &hsa_atomic_min_system_long(arg_u64 %ret)(arg_u64 %arg_p0, arg_u64 %arg_p1)
{
    @hsa_atomic_min_system_entry:
    ld_arg_align(8)_u64	$d0, [%arg_p0];                      
    ld_arg_align(8)_s64	$d1, [%arg_p1];                       
	atomic_min_global_rlx_system_s64	$d2, [$d0], $d1;
    st_arg_u64 $d2, [%ret];
    ret;
};

prog function &hsa_atomic_cas_system_long(arg_u64 %ret)(arg_u64 %arg_p0, arg_u64 %arg_p1, arg_u64 %arg_p2)
{
    @hsa_atomic_cas_system_entry:
    ld_arg_align(8)_u64	$d0, [%arg_p0];                      
    ld_arg_align(8)_s64	$d1, [%arg_p1];                       
    ld_arg_align(8)_s64	$d2, [%arg_p2];                       
	atomic_cas_global_rlx_system_b64	$d3, [$d0], $d1, $d2;
    st_arg_u64 $d3, [%ret];
    ret;
};


