version 0:20140528:$full:$large;
extension "amd:gcn";
extension "IMAGE";

decl prog function &abort()();

prog kernel &__OpenCL_memApp_kernel(
	kernarg_u64 %A,
	kernarg_u64 %N1,
	kernarg_u64 %start1,
	kernarg_u64 %stride1,
	kernarg_u64 %laps1,
	kernarg_u64 %skip1,
	kernarg_u64 %epocs1)
{
	pragma  "AMD RTI", "ARGSTART:__OpenCL_memApp_kernel";
	pragma  "AMD RTI", "version:3:1:104";
	pragma  "AMD RTI", "device:generic";
	pragma  "AMD RTI", "uniqueid:1024";
	pragma  "AMD RTI", "function:1:0";
	pragma  "AMD RTI", "memory:64bitABI";
	pragma  "AMD RTI", "uavid:8";
	pragma  "AMD RTI", "privateid:8";
	pragma  "AMD RTI", "ARGEND:__OpenCL_memApp_kernel";

@__OpenCL_memApp_kernel_entry:
	// BB#0:                                // %entry
	ld_kernarg_align(8)_width(all)_u64	$d0, [%epocs1];
	ld_global_u32	$s0, [$d0];
	ld_kernarg_align(8)_width(all)_u64	$d0, [%laps1];
	ld_global_u32	$s1, [$d0];
	cmp_gt_b1_s32	$c0, $s1, 0;
	cmp_gt_b1_s32	$c1, $s0, 0;
	and_b1	$c0, $c1, $c0;
	cmp_ne_b1_b1	$c0, $c0, 1;
	cbr_b1	$c0, @BB0_5;
	// BB#1:                                // %while.cond.preheader.us.preheader
	ld_kernarg_align(8)_width(all)_u64	$d0, [%start1];
	ld_kernarg_align(8)_width(all)_u64	$d1, [%stride1];
	ld_kernarg_align(8)_width(all)_u64	$d2, [%skip1];
	ld_global_u32	$s2, [$d2];
	ld_global_u32	$s3, [$d1];
	ld_global_u32	$s8, [$d0];
	workitemabsid_u32	$s4, 0;
	ld_kernarg_align(8)_width(all)_u64	$d0, [%N1];
	ld_global_u32	$s5, [$d0];
	ld_kernarg_align(8)_width(all)_u64	$d0, [%A];
	cvt_s64_s32	$d1, $s3;
	shl_u64	$d1, $d1, 2;
	mov_b32	$s6, 0;
	mov_b32	$s7, 1;

@BB0_2:
	// %while.cond.preheader.us
	cmp_ge_b1_s32	$c0, $s8, $s5;
	cbr_b1	$c0, @BB0_3;
	// BB#6:                                // %while.body.us.preheader
	cvt_s64_s32	$d2, $s8;
	shl_u64	$d2, $d2, 2;
	add_u64	$d2, $d0, $d2;
	mov_b32	$s9, $s7;

@BB0_7:
	// %while.body.us
	add_u32	$s10, $s8, $s3;
	cmp_lt_b1_s32	$c0, $s9, $s1;
	cmp_lt_b1_s32	$c1, $s10, $s5;
	and_b1	$c0, $c0, $c1;
	add_u32	$s8, $s4, $s8;
	st_global_u32	$s8, [$d2];
	add_u64	$d2, $d2, $d1;
	add_u32	$s9, $s9, 1;
	mov_b32	$s8, $s10;
	cbr_b1	$c0, @BB0_7;
	br	@BB0_4;

@BB0_3:
	mov_b32	$s10, $s8;

@BB0_4:
	// %while.end.us
	add_u32	$s8, $s10, $s2;
	add_u32	$s6, $s6, 1;
	cmp_lt_b1_s32	$c0, $s6, $s0;
	cbr_b1	$c0, @BB0_2;

@BB0_5:
	// %for.end
	ret;
};
