
In this application, the kernel inserts given set of keys in the binary search 
tree created by the host. Simultaneously the host also inserts different set of keys.
To run the application so the following:

1. Install HSA stack (runtime, compilers, CLOC, drivers) as given in the HSA Foundation web site GITHUB
2. Set environment variables

export HSA_RUNTIME_PATH=/home/cas/Prakash/GitObsedian/HSA-Runtime-AMD
export HSA_KMT_PATH=/home/cas/Prakash/GitObsedian/HSA-Drivers-Linux-AMD/kfd-0.8/libhsakmt/
export HSA_OKRA_PATH=/home/cas/Prakash/GitObsedian/Okra-Interface-to-HSA-Device/okra/
export HSA_LLVM_PATH=/home/cas/Prakash/GitObsedian/HSAIL-HLC-Stable/bin
export LD_LIBRARY_PATH=$HSA_RUNTIME_PATH/lib/x86_64:$HSA_KMT_PATH/lnx64a:$HSA_OKRA_PATH/dist/bin
export OKRA_DISABLE_FIX_HSAIL=1

3. Set these macros to the value you want. Number of nodes refer to the nodes
to be inserted in the tree and host percent is the percentage to be inserted by
the host (rest would be inserted by the kernel/GPU). These are in
SVMAtomicsBinaryTreeInsert.hpp file.

#define   NUMBER_OF_NODES         10 * 1024 * 1024
#define   WORKGROUP_SIZE          256
#define   HOST_PERCENT            10

4. Run by giving ./SVMAtomicsBinaryTreeInsert

Notes: 

a) This needs Stable compiler since we are using platform atomics, which are
not supported yet on Development compiler
b) Therefore you need to define DUMMY_ARGS=1 in the Makefile
c) There is a bug in the compiler and so we need to disable optimization
during "opt" to O0. Otherwise, we need to put atomic_work_item_fence call in the CL
file.  We have modified the cloc for this purpose. We send -O0 to CLOC. 

It will report "Passed" if everything is passed.
