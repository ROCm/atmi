version 0:20140528:$full:$large;
extension "amd:gcn";
extension "IMAGE";

decl prog function &_Z39atomic_compare_exchange_strong_explicitPVU3AS4U7_AtomicPU3AS4ii12memory_orderS3_12memory_scope(arg_u32 %ret)(
	arg_u64 %arg_p0,
	arg_u64 %arg_p1,
	arg_u32 %arg_p2,
	arg_u32 %arg_p3,
	arg_u32 %arg_p4,
	arg_u32 %arg_p5);

decl prog function &abort()();

prog kernel &__OpenCL_binTreeInsert_kernel(
	kernarg_u64 %global_offset_0,
	kernarg_u64 %global_offset_1,
	kernarg_u64 %global_offset_2,
	kernarg_u64 %printf_buffer,
	kernarg_u64 %vqueue_pointer,
	kernarg_u64 %aqlwrap_pointer,
	kernarg_u64 %rootNode,
	kernarg_u64 %devStartNode,
	kernarg_u64 %g_nodes)
{
	pragma  "AMD RTI", "ARGSTART:__OpenCL_binTreeInsert_kernel";
	pragma  "AMD RTI", "version:3:1:104";
	pragma  "AMD RTI", "device:generic";
	pragma  "AMD RTI", "uniqueid:1030";
	pragma  "AMD RTI", "memory:private:128";
	pragma  "AMD RTI", "memory:region:0";
	pragma  "AMD RTI", "memory:local:0";
	pragma  "AMD RTI", "value:global_offset_0:u64:1:1:0";
	pragma  "AMD RTI", "value:global_offset_1:u64:1:1:16";
	pragma  "AMD RTI", "value:global_offset_2:u64:1:1:32";
	pragma  "AMD RTI", "pointer:printf_buffer:u8:1:1:48:uav:8:1:RW:0:0:0";
	pragma  "AMD RTI", "value:vqueue_pointer:u64:1:1:64";
	pragma  "AMD RTI", "value:aqlwrap_pointer:u64:1:1:80";
	pragma  "AMD RTI", "pointer:rootNode:u8:1:1:96:uav:8:1:RW:0:0:0";
	pragma  "AMD RTI", "pointer:devStartNode:u8:1:1:112:uav:8:1:RW:0:0:0";
	pragma  "AMD RTI", "pointer:g_nodes:u32:1:1:128:uav:8:4:RW:0:0:0";
	pragma  "AMD RTI", "function:1:0";
	pragma  "AMD RTI", "memory:64bitABI";
	pragma  "AMD RTI", "uavid:8";
	pragma  "AMD RTI", "privateid:8";
	pragma  "AMD RTI", "enqueue_kernel:0";
	pragma  "AMD RTI", "kernel_index:0";
	pragma  "AMD RTI", "reflection:0:size_t";
	pragma  "AMD RTI", "reflection:1:size_t";
	pragma  "AMD RTI", "reflection:2:size_t";
	pragma  "AMD RTI", "reflection:3:size_t";
	pragma  "AMD RTI", "reflection:4:size_t";
	pragma  "AMD RTI", "reflection:5:size_t";
	pragma  "AMD RTI", "reflection:6:void*";
	pragma  "AMD RTI", "reflection:7:void*";
	pragma  "AMD RTI", "reflection:8:int*";
	pragma  "AMD RTI", "ARGEND:__OpenCL_binTreeInsert_kernel";
	align(4) private_u8 %privateStack[116];

@__OpenCL_binTreeInsert_kernel_entry:
	// BB#0:                                // %entry
	ld_kernarg_align(8)_width(all)_u64	$d0, [%rootNode];
	st_private_align(8)_u64	$d0, [%privateStack];
	ld_kernarg_align(8)_width(all)_u64	$d0, [%devStartNode];
	st_private_align(8)_u64	$d0, [%privateStack][8];
	ld_kernarg_align(8)_width(all)_u64	$d0, [%g_nodes];
	st_private_align(8)_u64	$d0, [%privateStack][16];
	ld_private_align(8)_u64	$d0, [%privateStack];
	st_private_align(8)_u64	$d0, [%privateStack][56];
	workitemabsid_u32	$s0, 0;
	ld_private_align(8)_u64	$d0, [%privateStack][8];
	st_private_align(8)_u64	$d0, [%privateStack][64];
	cvt_u64_u32	$d0, $s0;
	ld_kernarg_align(8)_width(all)_u64	$d1, [0];
	add_u64	$d0, $d0, $d1;
	ld_private_align(8)_u64	$d1, [%privateStack][16];
	ld_global_align(4)_u32	$s0, [$d1];
	cvt_s64_s32	$d1, $s0;
	st_private_align(8)_u64	$d1, [%privateStack][80];
	st_private_align(8)_u64	$d0, [%privateStack][88];
	ld_private_align(8)_u64	$d1, [%privateStack][80];
	cmp_ge_b1_u64	$c0, $d0, $d1;
	cbr_b1	$c0, @BB0_24;
	// BB#1:                                // %if.end
	mov_b32	$s0, 0;
	st_private_align(4)_u32	$s0, [%privateStack][72];
	ld_private_align(8)_u64	$d0, [%privateStack][56];
	st_private_align(8)_u64	$d0, [%privateStack][32];
	ld_private_align(8)_u64	$d0, [%privateStack][56];
	st_private_align(8)_u64	$d0, [%privateStack][40];
	ld_private_align(8)_u64	$d0, [%privateStack][88];
	shl_u64	$d0, $d0, 5;
	ld_private_align(8)_u64	$d1, [%privateStack][64];
	add_u64	$d0, $d1, $d0;
	st_private_align(8)_u64	$d0, [%privateStack][48];
	ld_global_align(4)_u32	$s1, [$d0];
	st_private_align(4)_u32	$s1, [%privateStack][76];
	nullptr_global_u64	$d0;
	br	@BB0_2;

@BB0_4:
	// %cond.true
	ld_private_align(8)_u64	$d1, [%privateStack][32];
	ld_global_align(8)_u64	$d1, [$d1+8];
	st_private_align(8)_u64	$d1, [%privateStack][32];

@BB0_2:
	// %while.cond
	ld_private_align(8)_u64	$d1, [%privateStack][32];
	cmp_eq_b1_s64	$c0, $d1, $d0;
	cbr_b1	$c0, @BB0_6;
	// BB#3:                                // %while.body
	ld_private_align(8)_u64	$d1, [%privateStack][32];
	st_private_align(8)_u64	$d1, [%privateStack][40];
	ld_private_align(8)_u64	$d1, [%privateStack][32];
	ld_global_align(4)_u32	$s1, [$d1];
	ld_private_align(4)_u32	$s2, [%privateStack][76];
	sub_u32	$s1, $s2, $s1;
	st_private_align(4)_u32	$s1, [%privateStack][72];
	cmp_le_b1_s32	$c0, $s1, -1;
	cbr_b1	$c0, @BB0_4;
	// BB#5:                                // %cond.false
	ld_private_align(8)_u64	$d1, [%privateStack][32];
	ld_global_align(8)_u64	$d1, [$d1+16];
	st_private_align(8)_u64	$d1, [%privateStack][32];
	br	@BB0_2;

@BB0_6:
	// %while.end
	ld_private_align(8)_u64	$d1, [%privateStack][32];
	st_private_align(8)_u64	$d1, [%privateStack][96];
	st_private_align(4)_u32	$s0, [%privateStack][104];
	ld_private_align(8)_u64	$d1, [%privateStack][40];
	add_u64	$d1, $d1, 24;
	st_private_align(8)_u64	$d1, [%privateStack][24];
	mov_b32	$s1, 1;

@BB0_7:
	// %do.body
	ld_private_align(8)_u64	$d1, [%privateStack][40];
	add_u64	$d1, $d1, 24;
	st_private_align(8)_u64	$d1, [%privateStack][24];
	st_private_align(4)_u32	$s0, [%privateStack][112];
	ld_private_align(8)_u64	$d1, [%privateStack][24];
	ld_private_align(4)_u32	$s2, [%privateStack][112];
	atomic_cas_global_scar_sys_equiv(255)_b32	$s3, [$d1], $s2, $s1;
	cmp_eq_b1_s32	$c0, $s3, $s2;
	cvt_u32_b1	$s4, $c0;
	st_private_align(4)_u32	$s3, [%privateStack][112];
	st_private_align(4)_u32	$s4, [%privateStack][108];
	cmp_ne_b1_s32	$c0, $s3, $s2;
	cbr_b1	$c0, @BB0_23;
	// BB#8:                                // %if.then9
	ld_private_align(4)_u32	$s2, [%privateStack][72];
	cmp_gt_b1_s32	$c0, $s2, -1;
	cbr_b1	$c0, @BB0_10;
	// BB#9:                                // %cond.true12
	ld_private_align(8)_u64	$d1, [%privateStack][40];
	ld_global_align(8)_u64	$d1, [$d1+8];
	br	@BB0_11;

@BB0_10:
	// %cond.false14
	ld_private_align(8)_u64	$d1, [%privateStack][40];
	ld_global_align(8)_u64	$d1, [$d1+16];

@BB0_11:
	// %cond.end16
	st_private_align(8)_u64	$d1, [%privateStack][96];
	cmp_eq_b1_s64	$c0, $d1, $d0;
	cbr_b1	$c0, @BB0_15;
	// BB#12:                                // %if.then19
	ld_private_align(8)_u64	$d1, [%privateStack][96];
	st_private_align(8)_u64	$d1, [%privateStack][40];
	ld_private_align(8)_u64	$d1, [%privateStack][96];
	ld_global_align(4)_u32	$s2, [$d1];
	ld_private_align(8)_u64	$d1, [%privateStack][48];
	ld_global_align(4)_u32	$s3, [$d1];
	sub_u32	$s2, $s3, $s2;
	st_private_align(4)_u32	$s2, [%privateStack][72];
	cmp_gt_b1_s32	$c0, $s2, -1;
	cbr_b1	$c0, @BB0_14;
	// BB#13:                                // %cond.true25
	ld_private_align(8)_u64	$d1, [%privateStack][40];
	ld_global_align(8)_u64	$d1, [$d1+8];
	st_private_align(8)_u64	$d1, [%privateStack][96];
	br	@BB0_22;

@BB0_15:
	// %if.else
	ld_private_align(4)_u32	$s2, [%privateStack][72];
	cmp_gt_b1_s32	$c0, $s2, -1;
	cbr_b1	$c0, @BB0_17;
	// BB#16:                                // %cond.true33
	ld_private_align(8)_u64	$d1, [%privateStack][48];
	br	@BB0_18;

@BB0_14:
	// %cond.false27
	ld_private_align(8)_u64	$d1, [%privateStack][40];
	ld_global_align(8)_u64	$d1, [$d1+16];
	st_private_align(8)_u64	$d1, [%privateStack][96];
	br	@BB0_22;

@BB0_17:
	// %cond.false34
	ld_private_align(8)_u64	$d1, [%privateStack][40];
	ld_global_align(8)_u64	$d1, [$d1+8];

@BB0_18:
	// %cond.end36
	ld_private_align(8)_u64	$d2, [%privateStack][40];
	st_global_align(8)_u64	$d1, [$d2+8];
	ld_private_align(4)_u32	$s2, [%privateStack][72];
	cmp_lt_b1_s32	$c0, $s2, 0;
	cbr_b1	$c0, @BB0_20;
	// BB#19:                                // %cond.true41
	ld_private_align(8)_u64	$d1, [%privateStack][48];
	br	@BB0_21;

@BB0_20:
	// %cond.false42
	ld_private_align(8)_u64	$d1, [%privateStack][40];
	ld_global_align(8)_u64	$d1, [$d1+16];

@BB0_21:
	// %cond.end44
	ld_private_align(8)_u64	$d2, [%privateStack][40];
	st_global_align(8)_u64	$d1, [$d2+16];
	st_private_align(4)_u32	$s1, [%privateStack][104];

@BB0_22:
	// %if.end47
	st_private_align(4)_u32	$s1, [%privateStack][112];
	ld_private_align(8)_u64	$d1, [%privateStack][24];
	ld_private_align(4)_u32	$s2, [%privateStack][112];
	atomic_cas_global_scar_sys_equiv(255)_b32	$s2, [$d1], $s2, $s0;
	st_private_align(4)_u32	$s2, [%privateStack][112];

@BB0_23:
	// %do.cond
	ld_private_align(4)_u32	$s2, [%privateStack][104];
	cmp_eq_b1_s32	$c0, $s2, 0;
	cbr_b1	$c0, @BB0_7;

@BB0_24:
	// %do.end
	ret;
};
