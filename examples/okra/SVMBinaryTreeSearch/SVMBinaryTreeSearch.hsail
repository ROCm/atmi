version 0:20140528:$full:$large;
extension "amd:gcn";
extension "IMAGE";

decl prog function &abort()();

prog kernel &__OpenCL_btree_search_kernel(
	kernarg_u64 %bstRoot,
	kernarg_u64 %searchKeyVect)
{
	pragma  "AMD RTI", "ARGSTART:__OpenCL_btree_search_kernel";
	pragma  "AMD RTI", "version:3:1:104";
	pragma  "AMD RTI", "device:generic";
	pragma  "AMD RTI", "uniqueid:1024";
	pragma  "AMD RTI", "function:1:0";
	pragma  "AMD RTI", "memory:64bitABI";
	pragma  "AMD RTI", "uavid:8";
	pragma  "AMD RTI", "privateid:8";
	pragma  "AMD RTI", "ARGEND:__OpenCL_btree_search_kernel";

@__OpenCL_btree_search_kernel_entry:
	// BB#0:                                // %entry
	ld_kernarg_align(8)_width(all)_u64	$d0, [%bstRoot];
	cmp_eq_b1_s64	$c0, $d0, 0;
	cbr_b1	$c0, @BB0_7;
	// BB#1:                                // %while.body.lr.ph
	workitemabsid_u32	$s0, 0;
	cvt_s64_s32	$d1, $s0;
	ld_kernarg_align(8)_width(all)_u64	$d2, [%searchKeyVect];
	mad_u64	$d1, $d1, 24, $d2;
	ld_global_u32	$s0, [$d1];

@BB0_2:
	// %while.body
	ld_global_u32	$s1, [$d0];
	cmp_eq_b1_s32	$c0, $s0, $s1;
	cbr_b1	$c0, @BB0_3;
	// BB#4:                                // %if.else
	cmp_ge_b1_s32	$c0, $s0, $s1;
	cbr_b1	$c0, @BB0_8;
	// BB#5:                                // %if.then8
	add_u64	$d0, $d0, 8;
	br	@BB0_6;

@BB0_8:
	// %if.else9
	add_u64	$d0, $d0, 16;

@BB0_6:
	// %while.cond.backedge
	ld_global_u64	$d0, [$d0];
	cmp_ne_b1_s64	$c0, $d0, 0;
	cbr_b1	$c0, @BB0_2;
	br	@BB0_7;

@BB0_3:
	// %while.cond.backedge.thread
	st_global_u64	$d0, [$d1+8];

@BB0_7:
	// %while.end
	ret;
};
