using source from CSquares.hsail
Using: Spectre
The fixed Hsail is:
version 0:95: $full : $large;

kernel &run(
   kernarg_u64 %_out, 
   kernarg_u64 %_in
){
   ld_kernarg_u64 $d0, [%_out];
   ld_kernarg_u64 $d1, [%_in];
   
   @block0:
   workitemabsid_u32 $s2, 0;
   cvt_s64_s32 $d2, $s2;
   mad_u64 $d3, $d2, 4, $d1;
   ld_global_f32 $s3, [$d3];
   mad_u64 $d4, $d2, 4, $d1;
   ld_global_f32 $s4, [$d4];
   mul_f32 $s5, $s3, $s4;
   mad_u64 $d4, $d2, 4, $d0;
   st_global_f32 $s5, [$d4];
   ret;
   
};


Entry name:&run
symbol offset:48
Kernel code handle after kernel create:14182400
Created kernel completed successfully
pushing pointer:0xd826c0
pushing pointer:0xd82610
Kernel Code handle during dispatch:14182400
Dispatch:group_segment_size:0
Dispatch:private_segment_size:0
Global size[0]:40
Global size[1]:1
Global size[2]:1
Group size[0]:40
Group size[1]:1
Group size[2]:1
Ring Doorbell
************This is my ISA***********
c0000501
bf8c007f
9380ff00
100000
93000800
4a000000
c0800700
3002009f
2c04009e
34020282
4a020501
34000082
bf8c007f
d24a6a04
500
7e060203
500a0701
dc300000
2000004
d24a6a04
500
500a0701
dc300000
3000004
ba803801
f0
bf8c0070
10040702
d24a6a00
100
7e060201
50020701
dc700000
200
Num vgpr:6
Num vgpr:9
HSA Runtime: setup scratch
HSA Runtime: setup dispatch ptr
HSA Runtime: Setup kernarg segment ptr
Done - Doorbell
Not done yet
Now done
Finished kernel, signal done
0->0,  1->1,  2->4,  3->9,  4->16,  5->25,  6->36,  7->49,  8->64,  9->81,  a->100,  b->121,  c->144,  d->169,  e->196,  f->225,  10->256,  11->289,  12->324,  13->361,  14->400,  15->441,  16->484,  17->529,  18->576,  19->625,  1a->676,  1b->729,  1c->784,  1d->841,  1e->900,  1f->961,  20->1024,  21->1089,  22->1156,  23->1225,  24->1296,  25->1369,  26->1444,  27->1521,  
PASSED
using source from CSquaresDbl.hsail
Using: Spectre
The fixed Hsail is:
version 0:95: $full : $large;

kernel &run(
   kernarg_u64 %_out,
   kernarg_u64 %_in,
   kernarg_f64 %_adjustment){

   ld_kernarg_u64 $d0, [%_out];
   ld_kernarg_u64 $d1, [%_in];
   ld_kernarg_f64 $d6, [%_adjustment];
@block0:
   workitemabsid_u32 $s2, 0;
   cvt_s64_s32 $d2, $s2;
   mad_u64 $d3, $d2, 8, $d1; 
   ld_global_f64 $d3, [$d3];        // load in[gid]
   mul_f64 $d5, $d3, $d3;			// square it
   add_f64 $d5, $d5, $d6;			// add in adjustment
   mad_u64 $d4, $d2, 8, $d0;
   st_global_f64 $d5, [$d4];	    // store at out[gid]
   ret;
 };



Entry name:&run
symbol offset:48
Kernel code handle after kernel create:15697408
Created kernel completed successfully
pushing pointer:0xd6c760
pushing pointer:0xd6c610
Kernel Code handle during dispatch:15697408
Dispatch:group_segment_size:0
Dispatch:private_segment_size:0
Global size[0]:40
Global size[1]:1
Global size[2]:1
Group size[0]:40
Group size[1]:1
Group size[2]:1
Ring Doorbell
************This is my ISA***********
c0000501
bf8c007f
9380ff00
100000
93000800
4a000000
c0800700
3002009f
2c04009d
34020283
34000083
4a020501
bf8c007f
d24a6a02
500
7e060203
50060701
dc340000
2000002
c0410704
bf8c0070
d2ca0002
20502
d2c80002
502
d24a6a00
100
7e080201
50020901
dc740000
200
Num vgpr:5
Num vgpr:9
HSA Runtime: setup scratch
HSA Runtime: setup dispatch ptr
HSA Runtime: Setup kernarg segment ptr
Done - Doorbell
Not done yet
Now done
Finished kernel, signal done
0->0.123,  1->1.123,  2->4.123,  3->9.123,  4->16.123,  5->25.123,  6->36.123,  7->49.123,  8->64.123,  9->81.123,  a->100.123,  b->121.123,  c->144.123,  d->169.123,  e->196.123,  f->225.123,  10->256.123,  11->289.123,  12->324.123,  13->361.123,  14->400.123,  15->441.123,  16->484.123,  17->529.123,  18->576.123,  19->625.123,  1a->676.123,  1b->729.123,  1c->784.123,  1d->841.123,  1e->900.123,  1f->961.123,  20->1024.12,  21->1089.12,  22->1156.12,  23->1225.12,  24->1296.12,  25->1369.12,  26->1444.12,  27->1521.12,  
PASSED
pushing pointer:0xd6c760
pushing pointer:0xd6c610
Kernel Code handle during dispatch:ef8600
Dispatch:group_segment_size:0
Dispatch:private_segment_size:0
Global size[0]:40
Global size[1]:1
Global size[2]:1
Group size[0]:40
Group size[1]:1
Group size[2]:1
Ring Doorbell
************This is my ISA***********
c0000501
bf8c007f
9380ff00
100000
93000800
4a000000
c0800700
3002009f
2c04009d
34020283
34000083
4a020501
bf8c007f
d24a6a02
500
7e060203
50060701
dc340000
2000002
c0410704
bf8c0070
d2ca0002
20502
d2c80002
502
d24a6a00
100
7e080201
50020901
dc740000
200
Num vgpr:5
Num vgpr:9
HSA Runtime: setup scratch
HSA Runtime: setup dispatch ptr
HSA Runtime: Setup kernarg segment ptr
Done - Doorbell
Not done yet
Now done
Finished kernel, signal done
0->0.246,  1->1.246,  2->4.246,  3->9.246,  4->16.246,  5->25.246,  6->36.246,  7->49.246,  8->64.246,  9->81.246,  a->100.246,  b->121.246,  c->144.246,  d->169.246,  e->196.246,  f->225.246,  10->256.246,  11->289.246,  12->324.246,  13->361.246,  14->400.246,  15->441.246,  16->484.246,  17->529.246,  18->576.246,  19->625.246,  1a->676.246,  1b->729.246,  1c->784.246,  1d->841.246,  1e->900.246,  1f->961.246,  20->1024.25,  21->1089.25,  22->1156.25,  23->1225.25,  24->1296.25,  25->1369.25,  26->1444.25,  27->1521.25,  
PASSED
pushing pointer:0xd6c760
pushing pointer:0xd6c610
Kernel Code handle during dispatch:ef8600
Dispatch:group_segment_size:0
Dispatch:private_segment_size:0
Global size[0]:40
Global size[1]:1
Global size[2]:1
Group size[0]:40
Group size[1]:1
Group size[2]:1
Ring Doorbell
************This is my ISA***********
c0000501
bf8c007f
9380ff00
100000
93000800
4a000000
c0800700
3002009f
2c04009d
34020283
34000083
4a020501
bf8c007f
d24a6a02
500
7e060203
50060701
dc340000
2000002
c0410704
bf8c0070
d2ca0002
20502
d2c80002
502
d24a6a00
100
7e080201
50020901
dc740000
200
Num vgpr:5
Num vgpr:9
HSA Runtime: setup scratch
HSA Runtime: setup dispatch ptr
HSA Runtime: Setup kernarg segment ptr
Done - Doorbell
Not done yet
Now done
Finished kernel, signal done
0->0.369,  1->1.369,  2->4.369,  3->9.369,  4->16.369,  5->25.369,  6->36.369,  7->49.369,  8->64.369,  9->81.369,  a->100.369,  b->121.369,  c->144.369,  d->169.369,  e->196.369,  f->225.369,  10->256.369,  11->289.369,  12->324.369,  13->361.369,  14->400.369,  15->441.369,  16->484.369,  17->529.369,  18->576.369,  19->625.369,  1a->676.369,  1b->729.369,  1c->784.369,  1d->841.369,  1e->900.369,  1f->961.369,  20->1024.37,  21->1089.37,  22->1156.37,  23->1225.37,  24->1296.37,  25->1369.37,  26->1444.37,  27->1521.37,  
PASSED
using source from CSquaresDblThis.hsail
Using: Spectre
The fixed Hsail is:
version 0:95: $full : $large;

kernel &run(
   kernarg_u64 %_this ){

   ld_kernarg_u64 $d2, [%_this];  // this
   ld_global_u64 $d1, [$d2 + 0];  // inarray
   ld_global_u64 $d0, [$d2 + 8];  // outarray
   ld_global_f64 $d6, [$d2 + 16]; // adjustment
@block0:
   workitemabsid_u32 $s2, 0;
   cvt_s64_s32 $d2, $s2;
   mad_u64 $d3, $d2, 8, $d1; 
   ld_global_f64 $d3, [$d3];     // load inarray[gid]
   mul_f64 $d5, $d3, $d3;        // square inarray[gid]
   add_f64 $d5, $d5, $d6;        // add in adjustment
   mad_u64 $d4, $d2, 8, $d0;
   st_global_f64 $d5, [$d4];
   ret;
 };



Entry name:&run
symbol offset:48
Kernel code handle after kernel create:14299392
Created kernel completed successfully
pushing pointer:0xd9e610
Kernel Code handle during dispatch:14299392
Dispatch:group_segment_size:0
Dispatch:private_segment_size:0
Global size[0]:40
Global size[1]:1
Global size[2]:1
Group size[0]:40
Group size[1]:1
Group size[2]:1
Ring Doorbell
************This is my ISA***********
c0000501
bf8c007f
9380ff00
100000
93000800
4a000000
c0400700
bf8c007f
7e0e0200
7e100201
dc340000
3000007
d24a6a05
11000
d2506a06
1a90108
dc340000
5000005
d24a6a01
12000
d2506a02
1a90108
dc340000
1000001
300e009f
2c10009d
340e0e83
4a0e1107
34000083
bf8c0272
4a060700
50080907
dc340000
3000003
bf8c0070
d2ca0003
20703
d2c80001
20303
4a060b00
50080d07
dc740000
103
Num vgpr:9
Num vgpr:9
HSA Runtime: setup scratch
HSA Runtime: setup dispatch ptr
HSA Runtime: Setup kernarg segment ptr
Done - Doorbell
Not done yet
Now done
Finished kernel, signal done
0->0.123,  1->1.123,  2->4.123,  3->9.123,  4->16.123,  5->25.123,  6->36.123,  7->49.123,  8->64.123,  9->81.123,  a->100.123,  b->121.123,  c->144.123,  d->169.123,  e->196.123,  f->225.123,  10->256.123,  11->289.123,  12->324.123,  13->361.123,  14->400.123,  15->441.123,  16->484.123,  17->529.123,  18->576.123,  19->625.123,  1a->676.123,  1b->729.123,  1c->784.123,  1d->841.123,  1e->900.123,  1f->961.123,  20->1024.12,  21->1089.12,  22->1156.12,  23->1225.12,  24->1296.12,  25->1369.12,  26->1444.12,  27->1521.12,  
PASSED
Kernel Code handle during dispatch:da3100
Dispatch:group_segment_size:0
Dispatch:private_segment_size:0
Global size[0]:40
Global size[1]:1
Global size[2]:1
Group size[0]:40
Group size[1]:1
Group size[2]:1
Ring Doorbell
************This is my ISA***********
c0000501
bf8c007f
9380ff00
100000
93000800
4a000000
c0400700
bf8c007f
7e0e0200
7e100201
dc340000
3000007
d24a6a05
11000
d2506a06
1a90108
dc340000
5000005
d24a6a01
12000
d2506a02
1a90108
dc340000
1000001
300e009f
2c10009d
340e0e83
4a0e1107
34000083
bf8c0272
4a060700
50080907
dc340000
3000003
bf8c0070
d2ca0003
20703
d2c80001
20303
4a060b00
50080d07
dc740000
103
Num vgpr:9
Num vgpr:9
HSA Runtime: setup scratch
HSA Runtime: setup dispatch ptr
HSA Runtime: Setup kernarg segment ptr
Done - Doorbell
Not done yet
Now done
Finished kernel, signal done
0->0.246,  1->1.246,  2->4.246,  3->9.246,  4->16.246,  5->25.246,  6->36.246,  7->49.246,  8->64.246,  9->81.246,  a->100.246,  b->121.246,  c->144.246,  d->169.246,  e->196.246,  f->225.246,  10->256.246,  11->289.246,  12->324.246,  13->361.246,  14->400.246,  15->441.246,  16->484.246,  17->529.246,  18->576.246,  19->625.246,  1a->676.246,  1b->729.246,  1c->784.246,  1d->841.246,  1e->900.246,  1f->961.246,  20->1024.25,  21->1089.25,  22->1156.25,  23->1225.25,  24->1296.25,  25->1369.25,  26->1444.25,  27->1521.25,  
PASSED
Kernel Code handle during dispatch:da3100
Dispatch:group_segment_size:0
Dispatch:private_segment_size:0
Global size[0]:40
Global size[1]:1
Global size[2]:1
Group size[0]:40
Group size[1]:1
Group size[2]:1
Ring Doorbell
************This is my ISA***********
c0000501
bf8c007f
9380ff00
100000
93000800
4a000000
c0400700
bf8c007f
7e0e0200
7e100201
dc340000
3000007
d24a6a05
11000
d2506a06
1a90108
dc340000
5000005
d24a6a01
12000
d2506a02
1a90108
dc340000
1000001
300e009f
2c10009d
340e0e83
4a0e1107
34000083
bf8c0272
4a060700
50080907
dc340000
3000003
bf8c0070
d2ca0003
20703
d2c80001
20303
4a060b00
50080d07
dc740000
103
Num vgpr:9
Num vgpr:9
HSA Runtime: setup scratch
HSA Runtime: setup dispatch ptr
HSA Runtime: Setup kernarg segment ptr
Done - Doorbell
Not done yet
Now done
Finished kernel, signal done
0->0.369,  1->1.369,  2->4.369,  3->9.369,  4->16.369,  5->25.369,  6->36.369,  7->49.369,  8->64.369,  9->81.369,  a->100.369,  b->121.369,  c->144.369,  d->169.369,  e->196.369,  f->225.369,  10->256.369,  11->289.369,  12->324.369,  13->361.369,  14->400.369,  15->441.369,  16->484.369,  17->529.369,  18->576.369,  19->625.369,  1a->676.369,  1b->729.369,  1c->784.369,  1d->841.369,  1e->900.369,  1f->961.369,  20->1024.37,  21->1089.37,  22->1156.37,  23->1225.37,  24->1296.37,  25->1369.37,  26->1444.37,  27->1521.37,  
PASSED
using source from CSquaresDblThisFunc.hsail
Using: Spectre
The fixed Hsail is:
version 0:95: $full : $large;

function &squareWithAdjustment (arg_f64 %_result) (arg_u64 %_this,  arg_f64 %_val) {
  ld_arg_u64  $d0, [%_this];
  ld_arg_f64  $d1, [%_val];
  ld_global_f64 $d2, [$d0 + 16]; // adjustment
  mul_f64     $d1, $d1, $d1;     // val * val
  add_f64     $d1, $d1, $d2;     // val*val + adj
  st_arg_f64  $d1, [%_result];
  ret;
};

kernel &run(
   kernarg_u64 %_this ){
   ld_kernarg_u64 $d2, [%_this];  // this
   ld_global_u64 $d1, [$d2 + 0];  // inarray
   ld_global_u64 $d0, [$d2 + 8];  // outarray
   ld_global_f64 $d6, [$d2 + 16]; // adjustment

   workitemabsid_u32 $s2, 0;
   cvt_s64_s32 $d2, $s2;
   mad_u64 $d3, $d2, 8, $d1; 
   ld_global_f64 $d3, [$d3];         // load inarray[gid]
   ld_kernarg_u64 $d7, [%_this];     // this
   {
   arg_u64 %_this;
   arg_f64 %_inval;
   arg_f64 %_outval;
   st_arg_u64   $d7, [%_this];
   st_arg_f64   $d3, [%_inval];       // pass to function
   call &squareWithAdjustment (%_outval) (%_this, %_inval);
   ld_arg_f64 $d5, [%_outval];      // get result
   }
   mad_u64 $d4, $d2, 8, $d0;
   st_global_f64 $d5, [$d4];        // store in outarray  
   ret;
 };



Entry name:&run
symbol offset:304
Kernel code handle after kernel create:23855104
Created kernel completed successfully
pushing pointer:0x16aa610
Kernel Code handle during dispatch:23855104
Dispatch:group_segment_size:0
Dispatch:private_segment_size:0
Global size[0]:40
Global size[1]:1
Global size[2]:1
Group size[0]:40
Group size[1]:1
Group size[2]:1
Ring Doorbell
************This is my ISA***********
c0000501
bf8c007f
9380ff00
100000
93000800
4a000000
c0400700
bf8c007f
7e0a0200
7e0c0201
dc340000
3000005
d24a6a01
11000
d2506a02
1a90106
dc340000
5000001
3002009f
2c04009d
34020283
4a0e0501
34100083
bf8c0171
4a000708
50020907
dc340000
2000000
7e000200
7e020201
bf8c0070
be801f00
8000ff00
24
82018001
be802100
4a040b08
50060d07
dc740000
2
Num vgpr:9
Num vgpr:9
HSA Runtime: setup scratch
HSA Runtime: setup dispatch ptr
HSA Runtime: Setup kernarg segment ptr
Done - Doorbell
Not done yet
Now done
Finished kernel, signal done
0->0.123,  1->1.123,  2->4.123,  3->9.123,  4->16.123,  5->25.123,  6->36.123,  7->49.123,  8->64.123,  9->81.123,  a->100.123,  b->121.123,  c->144.123,  d->169.123,  e->196.123,  f->225.123,  10->256.123,  11->289.123,  12->324.123,  13->361.123,  14->400.123,  15->441.123,  16->484.123,  17->529.123,  18->576.123,  19->625.123,  1a->676.123,  1b->729.123,  1c->784.123,  1d->841.123,  1e->900.123,  1f->961.123,  20->1024.12,  21->1089.12,  22->1156.12,  23->1225.12,  24->1296.12,  25->1369.12,  26->1444.12,  27->1521.12,  
PASSED
Kernel Code handle during dispatch:16c0000
Dispatch:group_segment_size:0
Dispatch:private_segment_size:0
Global size[0]:40
Global size[1]:1
Global size[2]:1
Group size[0]:40
Group size[1]:1
Group size[2]:1
Ring Doorbell
************This is my ISA***********
c0000501
bf8c007f
9380ff00
100000
93000800
4a000000
c0400700
bf8c007f
7e0a0200
7e0c0201
dc340000
3000005
d24a6a01
11000
d2506a02
1a90106
dc340000
5000001
3002009f
2c04009d
34020283
4a0e0501
34100083
bf8c0171
4a000708
50020907
dc340000
2000000
7e000200
7e020201
bf8c0070
be801f00
8000ff00
24
82018001
be802100
4a040b08
50060d07
dc740000
2
Num vgpr:9
Num vgpr:9
HSA Runtime: setup scratch
HSA Runtime: setup dispatch ptr
HSA Runtime: Setup kernarg segment ptr
Done - Doorbell
Not done yet
Now done
Finished kernel, signal done
0->0.246,  1->1.246,  2->4.246,  3->9.246,  4->16.246,  5->25.246,  6->36.246,  7->49.246,  8->64.246,  9->81.246,  a->100.246,  b->121.246,  c->144.246,  d->169.246,  e->196.246,  f->225.246,  10->256.246,  11->289.246,  12->324.246,  13->361.246,  14->400.246,  15->441.246,  16->484.246,  17->529.246,  18->576.246,  19->625.246,  1a->676.246,  1b->729.246,  1c->784.246,  1d->841.246,  1e->900.246,  1f->961.246,  20->1024.25,  21->1089.25,  22->1156.25,  23->1225.25,  24->1296.25,  25->1369.25,  26->1444.25,  27->1521.25,  
PASSED
Kernel Code handle during dispatch:16c0000
Dispatch:group_segment_size:0
Dispatch:private_segment_size:0
Global size[0]:40
Global size[1]:1
Global size[2]:1
Group size[0]:40
Group size[1]:1
Group size[2]:1
Ring Doorbell
************This is my ISA***********
c0000501
bf8c007f
9380ff00
100000
93000800
4a000000
c0400700
bf8c007f
7e0a0200
7e0c0201
dc340000
3000005
d24a6a01
11000
d2506a02
1a90106
dc340000
5000001
3002009f
2c04009d
34020283
4a0e0501
34100083
bf8c0171
4a000708
50020907
dc340000
2000000
7e000200
7e020201
bf8c0070
be801f00
8000ff00
24
82018001
be802100
4a040b08
50060d07
dc740000
2
Num vgpr:9
Num vgpr:9
HSA Runtime: setup scratch
HSA Runtime: setup dispatch ptr
HSA Runtime: Setup kernarg segment ptr
Done - Doorbell
Not done yet
Now done
Finished kernel, signal done
0->0.369,  1->1.369,  2->4.369,  3->9.369,  4->16.369,  5->25.369,  6->36.369,  7->49.369,  8->64.369,  9->81.369,  a->100.369,  b->121.369,  c->144.369,  d->169.369,  e->196.369,  f->225.369,  10->256.369,  11->289.369,  12->324.369,  13->361.369,  14->400.369,  15->441.369,  16->484.369,  17->529.369,  18->576.369,  19->625.369,  1a->676.369,  1b->729.369,  1c->784.369,  1d->841.369,  1e->900.369,  1f->961.369,  20->1024.37,  21->1089.37,  22->1156.37,  23->1225.37,  24->1296.37,  25->1369.37,  26->1444.37,  27->1521.37,  
PASSED
using source from Cooparray.hsail
Using: Spectre
The fixed Hsail is:
version 0:95: $full : $large;

kernel &run(
   kernarg_u64 %_out, 
   kernarg_u64 %_in
){
   ld_kernarg_u64 $d0, [%_out];
   ld_kernarg_u64 $d1, [%_in];
   
   @block0:
   workitemabsid_u32 $s2, 0;
   cvt_s64_s32 $d2, $s2;
   // pointers are 8 bytes each
   mad_u64 $d3, $d2, 8, $d1;
   ld_global_u64 $d3, [$d3];   //pointer
   // add_u64  $d3, $d3, 8;       // offset to data
   ld_global_f32 $s0, [$d3+0]; // x
   ld_global_f32 $s1, [$d3+4]; // y
   ld_global_f32 $s2, [$d3+8]; // z
   mul_f32 $s0, $s0, $s0;	   // x*x
   mul_f32 $s1, $s1, $s1;	   // y*y
   add_f32 $s0, $s0, $s1;	   // x*x + y*y
   mul_f32 $s2, $s2, $s2;	   // z*z
   add_f32 $s0, $s0, $s2;	   // x*x + y*y + z*z
   sqrt_f32 $s0, $s0;
   // output array of floats, 4 bytes each
   mad_u64 $d4, $d2, 4, $d0;
   st_global_f32 $s0, [$d4];
   ret;
   
};


Entry name:&run
symbol offset:48
Kernel code handle after kernel create:21295616
Created kernel completed successfully
pushing pointer:0x144a760
pushing pointer:0x144a610
Kernel Code handle during dispatch:21295616
Dispatch:group_segment_size:0
Dispatch:private_segment_size:0
Global size[0]:40
Global size[1]:1
Global size[2]:1
Group size[0]:40
Group size[1]:1
Group size[2]:1
Ring Doorbell
************This is my ISA***********
c0000501
bf8c007f
9380ff00
100000
93000800
4a000000
c0800700
3002009f
2c04009d
34060283
4a040503
34060083
bf8c007f
d24a6a05
503
7e080203
500c0902
dc340000
2000005
bf8c0070
dc300000
4000002
d24a6a05
10902
d2506a06
1a90103
dc300000
5000005
d24a6a02
11102
d2506a03
1a90103
dc300000
2000002
ba803801
f0
bf8c0272
10060904
bf8c0171
10080b05
6060903
bf8c0070
10040502
6040503
be8203ff
f800000
d0020002
502
d2000003
94080
56040702
7e065d02
10080702
100606f0
d2960005
23c20903
d2960004
4120b04
d2960006
240a0904
d2960003
40e0b03
d2960003
4120706
b0040260
d110006a
902
d2000004
9a080
56060903
40503
2c06009e
34020282
4a020701
34000082
d24a6a00
100
7e060201
50020701
dc700000
200
Num vgpr:7
Num vgpr:9
HSA Runtime: setup scratch
HSA Runtime: setup dispatch ptr
HSA Runtime: Setup kernarg segment ptr
Done - Doorbell
Not done yet
Now done
Finished kernel, signal done
0->2.23607 (400f1bbd),  1->3.74166 (406f7751),  2->5.38516 (40ac5345),  3->7.07107 (40e24630),  4->8.77496 (410c6641),  
5->10.4881 (4127cf36),  6->12.2066 (41434e0d),  7->13.9284 (415edaae),  8->15.6525 (417a708b),  9->17.3781 (418b0672),  
10->19.105 (4198d6fc),  11->20.8327 (41a6a94d),  12->22.561 (41b47cfc),  13->24.2899 (41c251bf),  14->26.0192 (41d0275f),  
15->27.7489 (41ddfdb2),  16->29.4788 (41ebd498),  17->31.209 (41f9abfa),  18->32.9393 (4203c1e2),  19->34.6699 (420aadf3),  
20->36.4006 (42119a2a),  21->38.1314 (42188681),  22->39.8623 (421f72f5),  23->41.5933 (42265f82),  24->43.3244 (422d4c25),  
25->45.0555 (423438db),  26->46.7868 (423b25a2),  27->48.518 (42421279),  28->50.2494 (4248ff5d),  29->51.9808 (424fec4e),  
30->53.7122 (4256d94a),  31->55.4437 (425dc650),  32->57.1752 (4264b360),  33->58.9067 (426ba078),  34->60.6383 (42728d97),  
35->62.3699 (42797abe),  36->64.1015 (428033f5),  37->65.8331 (4283aa8f),  38->67.5648 (4287212b),  39->69.2965 (428a97ca),  

PASSED
using source from CAtomicExch.hsail
Using: Spectre
The fixed Hsail is:
version 0:95: $full : $large;

kernel &run(
   align(8) kernarg_u64 %_atomic, 
   align(8) kernarg_u64 %_out,
   align(8) kernarg_u32 %_siz
){
   ld_kernarg_u64 $d0, [%_atomic];
   ld_kernarg_u64 $d1, [%_out];
   ld_kernarg_u32 $s0, [%_siz];
   
   workitemabsid_u32 $s2, 0;
   add_u32 $s2, $s2, 1;
   atomic_exch_global_scar_sys_b32  $s3, [$d0], $s2;   // read old into $s3, set new from $s2
   // link old to new
   mad_u32 $s3, $s3, $s0, $s2;    // $s3 = offset of modified cell
   cvt_s64_s32 $d3, $s3;
   add_u64 $d3, $d1, $d3;

   st_global_u8 1, [$d3];
   ret;
   
};


Entry name:&run
symbol offset:48
Kernel code handle after kernel create:16222976
Created kernel completed successfully
pushing pointer:0x603280
pushing pointer:0xf68610
Pushing interger arg...
Integerarg:40
Aparapi passes:40
Kernel Code handle during dispatch:16222976
Dispatch:group_segment_size:0
Dispatch:private_segment_size:0
Global size[0]:39
Global size[1]:1
Global size[2]:1
Group size[0]:39
Group size[1]:1
Group size[2]:1
Ring Doorbell
************This is my ISA***********
c0000501
bf8c007f
9380ff00
100000
93000800
4a000000
c0800700
c0020704
4a000081
bf8c007f
7e020200
7e040201
dcc10000
1000001
bf8c0070
e1c40000
0
d2d20001
901
4a000101
3002009f
4a000002
7e040203
50020302
7e040281
dc600000
200
Num vgpr:3
Num vgpr:9
HSA Runtime: setup scratch
HSA Runtime: setup dispatch ptr
HSA Runtime: Setup kernarg segment ptr
Done - Doorbell
Not done yet
Now done
Finished kernel, signal done
.*......................................
..*.....................................
...*....................................
....*...................................
.................*......................
......*.................................
.......*................................
........*...............................
.....................*..................
..........*.............................
...........*............................
............*...........................
.........................*..............
..............*.........................
...............*........................
................*.......................
.............................*..........
..................*.....................
...................*....................
....................*...................
.................................*......
......................*.................
.......................*................
........................*...............
.....................................*..
..........................*.............
...........................*............
............................*...........
.............*..........................
..............................*.........
...............................*........
................................*.......
*.......................................
..................................*.....
...................................*....
....................................*...
.....*..................................
......................................*.
.......................................*
.........*..............................


PASSED
